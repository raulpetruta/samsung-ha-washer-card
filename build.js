// Build script to combine all modules into a single file for HACS distribution
const fs = require('fs');
const path = require('path');

console.log('🔨 Building Samsung Washer Card...');

// Helper function to read and clean module content
function readModule(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  // Remove export statements and clean up
  return content
    .replace(/export\s+(const\s+\w+\s*=|class\s+\w+|function\s+\w+)/g, '$1')
    .replace(/export\s+{[^}]*};\s*$/gm, '')
    .trim();
}

// Read all the source files
console.log('📖 Reading source files...');
const baseStyles = readModule('src/styles/base.js');
const animationStyles = readModule('src/styles/animations.js');
const responsiveStyles = readModule('src/styles/responsive.js');

const washingMachine = readModule('src/components/washing-machine.js');
const sensorsGrid = readModule('src/components/sensors-grid.js');
const controlsSection = readModule('src/components/controls-section.js');

const entityHelpers = readModule('src/utils/entity-helpers.js');
const formatters = readModule('src/utils/formatters.js');

// Read the main class file and remove imports
console.log('🔧 Processing main class...');
const mainContent = fs.readFileSync('src/main.js', 'utf8')
  .replace(/\/\/ Samsung Washer Card[\s\S]*?\/\/ Imports\s*/g, '')
  .replace(/import\s+{[^}]+}\s+from\s+['"][^'"]+['"];\s*/g, '')
  .trim();

// Build the combined content
console.log('🏗️  Combining modules...');
const combinedContent = `// Samsung Washer Card - Combined Distribution File
// This file is automatically generated from modular sources
// Repository: https://github.com/yourusername/samsung-washer-card
// Generated: ${new Date().toISOString()}

${baseStyles}

${animationStyles}

${responsiveStyles}

${washingMachine}

${sensorsGrid}

${controlsSection}

${entityHelpers}

${formatters}

${mainContent}

console.info('Samsung Washer Card loaded successfully');`;

// Write the combined file
console.log('💾 Writing distribution file...');
fs.writeFileSync('samsung-washer-card.js', combinedContent);

// Create dist directory and copy there too
if (!fs.existsSync('dist')) {
  fs.mkdirSync('dist');
}
fs.writeFileSync('dist/samsung-washer-card.js', combinedContent);

// Generate some statistics
const stats = {
  size: fs.statSync('samsung-washer-card.js').size,
  lines: combinedContent.split('\n').length,
  modules: 8
};

console.log('✅ Build complete!');
console.log(`📦 File: samsung-washer-card.js`);
console.log(`📏 Size: ${(stats.size / 1024).toFixed(1)} KB`);
console.log(`📄 Lines: ${stats.lines}`);
console.log(`🧩 Modules: ${stats.modules}`);
console.log('🚀 Ready for distribution!');

// Validate the output
try {
  // Basic syntax check (if Node.js can parse it)
  new (require('vm')).Script(combinedContent);
  console.log('✅ JavaScript syntax validation passed');
} catch (error) {
  console.error('❌ JavaScript syntax error:', error.message);
  process.exit(1);
}
